{"version":3,"sources":["components/Count.tsx","components/ControlDisplay.tsx","components/SettingsDisplay.tsx","state/count-reducer.ts","App.tsx","reportWebVitals.ts","state/redux-store.ts","index.tsx"],"names":["Count","count","isError","isRed","max","className","ControlDisplay","increment","decrement","reset","start","Button","variant","size","style","margin","color","disabled","onClick","textAlign","SettingsDisplay","props","value","onChange","e","startValue","currentTarget","type","min","maxValue","setValue","initialState","StartValue","SetError","App","state","useSelector","dispatch","useDispatch","MaxValue","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","localStorage","getItem","preloaderState","JSON","parse","store","createStore","subscribe","setItem","stringify","getState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.08692abf.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\ntype CountPropsType = {\r\n    count: number\r\n    isError: boolean | number | null\r\n    max: number\r\n}\r\n\r\nexport const Count: React.FC<CountPropsType> = ({count, isError, max}) => {\r\n    let isRed = count === max || isError;\r\n    return (\r\n        <h1 className={`count ${isRed ? \"active\" : \"\"}`}>{isError ? 'Incorrect number' : count}</h1>\r\n    );\r\n}","import {Button} from \"@material-ui/core\";\r\nimport React from \"react\";\r\n\r\ntype ControlPropsType = {\r\n    count: number\r\n    start: number\r\n    max: number\r\n    increment: () => void\r\n    decrement: () => void\r\n    reset: () => void\r\n}\r\n\r\nexport const ControlDisplay: React.FC<ControlPropsType> = ({\r\n                                                               count, increment,\r\n                                                               decrement, reset, start, max\r\n                                                           }) => {\r\n    return (\r\n        <div className=\"app-wrapper\">\r\n            <Button\r\n                variant={\"contained\"}\r\n                size={\"large\"}\r\n                style={{margin: \"5px\"}}\r\n                color={\"primary\"}\r\n                disabled={count === max} onClick={increment}>Inc</Button>\r\n            <Button\r\n                variant={\"contained\"}\r\n                size={\"large\"}\r\n                style={{margin: \"5px\"}}\r\n                color={\"primary\"}\r\n                disabled={count === start} onClick={decrement}>Dec</Button>\r\n            <Button\r\n                variant={\"contained\"}\r\n                size={\"large\"}\r\n                style={{margin: \"5px\", textAlign: \"center\"}}\r\n                color={\"secondary\"}\r\n                disabled={count === start} onClick={reset}>Res</Button>\r\n        </div>\r\n    );\r\n}\r\n","import React, {ChangeEvent} from \"react\";\r\nimport {Button} from \"@material-ui/core\";\r\n\r\ntype SettingsPropsType = {\r\n    count: number\r\n    start: number\r\n    max: number\r\n    setValue: () => void\r\n    startValue: (value: number) => void\r\n    maxValue: (value: number) => void\r\n}\r\n\r\nexport const SettingsDisplay: React.FC<SettingsPropsType> = (props) => {\r\n\r\n    const onChangeStartValue = (e: ChangeEvent<HTMLInputElement>) => props.startValue(+e.currentTarget.value)\r\n    const onChangeMaxValue = (e: ChangeEvent<HTMLInputElement>) => props.maxValue(+e.currentTarget.value)\r\n\r\n    return (\r\n        <div className=\"control\">\r\n            <div className=\"start\">\r\n                StartValue: <input className=\"input\"\r\n                                   value={props.start}\r\n                                   onChange={onChangeStartValue}\r\n                                   type=\"number\"\r\n                                   min={\"0\"}\r\n                                   max={\"99\"}/>\r\n            </div>\r\n            <div className=\"max\">\r\n                MaxValue: <input className=\"input\"\r\n                                 value={props.max}\r\n                                 onChange={onChangeMaxValue}\r\n                                 type=\"number\"\r\n                                 min={\"0\"}\r\n                                 max={\"99\"}/>\r\n            </div>\r\n            <Button\r\n                className=\"set\"\r\n                variant={\"contained\"}\r\n                size={\"large\"}\r\n                onClick={props.setValue}\r\n                color={\"default\"}>Set</Button>\r\n        </div>\r\n    )\r\n}","export type InitialStateType = {\r\n    count: number\r\n    start: number\r\n    max: number\r\n    isError: boolean | null\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    count: 0,\r\n    start: 0,\r\n    max: 0,\r\n    isError: null\r\n}\r\n\r\ntype ActionType = IncrementType | DecrementType | ResetType\r\n    | StartValueType | MaxValueType | SetErrorType\r\n\r\ntype IncrementType = {\r\n    type: \"INCREMENT\"\r\n}\r\ntype DecrementType = {\r\n    type: \"DECREMENT\"\r\n}\r\ntype ResetType = {\r\n    type: \"RESET\"\r\n}\r\ntype StartValueType = {\r\n    type: \"START-VALUE\"\r\n    value: number\r\n}\r\ntype MaxValueType = {\r\n    type: \"MAX-VALUE\"\r\n    value: number\r\n}\r\ntype SetErrorType = {\r\n    type: \"SET-ERROR\"\r\n    isError: boolean | null\r\n}\r\n\r\nexport const countReducer = (state: InitialStateType = initialState, action: ActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"INCREMENT\":\r\n            return state.count < state.max ? {\r\n                ...state,\r\n                count: state.count + 1\r\n            } : state;\r\n        case \"DECREMENT\":\r\n            return state.count > state.start ? {\r\n                ...state,\r\n                count: state.count -1\r\n            } : state\r\n        case \"RESET\":\r\n            return {\r\n                ...state,\r\n                count: state.start\r\n            }\r\n        case \"START-VALUE\":\r\n            return {\r\n                ...state,\r\n                start: action.value,\r\n                count: action.value\r\n            }\r\n        case \"MAX-VALUE\":\r\n            return {\r\n                ...state,\r\n                max: action.value\r\n            }\r\n        case \"SET-ERROR\":\r\n            return {\r\n                ...state,\r\n                isError: action.isError\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const Increment = (): IncrementType => ({type: \"INCREMENT\",})\r\nexport const Decrement = (): DecrementType => ({type: \"DECREMENT\"})\r\nexport const Reset = (): ResetType => ({type: \"RESET\"})\r\nexport const StartValue = (value: number): StartValueType => ({type: \"START-VALUE\", value})\r\nexport const MaxValue = (value: number): MaxValueType => ({type: \"MAX-VALUE\", value})\r\nexport const SetError = (isError: boolean | null): SetErrorType => ({type: \"SET-ERROR\", isError})\r\n","import React from 'react';\nimport './App.css';\nimport {Count} from \"./components/Count\";\nimport {ControlDisplay} from \"./components/ControlDisplay\";\nimport {SettingsDisplay} from \"./components/SettingsDisplay\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStateType} from \"./state/redux-store\";\nimport {Decrement, Increment, InitialStateType, MaxValue, Reset, SetError, StartValue} from \"./state/count-reducer\";\n\nfunction App() {\n\n    const state = useSelector<AppStateType, InitialStateType>(state => state.count)\n\n    const dispatch = useDispatch()\n\n    function increment() {\n           dispatch(Increment())\n    }\n    function decrement() {\n            dispatch(Decrement())\n    }\n    function reset() {\n        dispatch(Reset())\n    }\n    function startValue(value: number) {\n        dispatch(StartValue(value))\n    }\n    function maxValue(value: number) {\n        dispatch(MaxValue(value))\n    }\n\n    function setValue() {\n        dispatch(SetError(null))\n        if (state.start < state.max)\n            dispatch(StartValue(state.start))\n        else\n            dispatch(SetError(true))\n    }\n\n    return (\n        <div>\n            <Count\n                count={state.count}\n                isError={state.isError}\n                max={state.max}/>\n            <ControlDisplay\n                count={state.count}\n                increment={increment}\n                decrement={decrement}\n                reset={reset}\n                start={state.start}\n                max={state.max}/>\n            <SettingsDisplay\n                count={state.count}\n                start={state.start}\n                max={state.max}\n                setValue={setValue}\n                startValue={startValue}\n                maxValue={maxValue}/>\n        </div>\n    )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {combineReducers, createStore} from \"redux\";\r\nimport {countReducer} from \"./count-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    count: countReducer\r\n})\r\n\r\nconst start = localStorage.getItem('startValue');\r\nconst max = localStorage.getItem('maxValue');\r\nlet preloaderState = {} as AppStateType;\r\nif (start && max) {\r\n    preloaderState = {\r\n        count: {\r\n            start: JSON.parse(start),\r\n            max: JSON.parse(max),\r\n            count: JSON.parse(start),\r\n            isError: null\r\n        }\r\n    };\r\n}\r\n\r\nlet store = createStore(rootReducer, preloaderState)\r\n\r\nstore.subscribe(() => {\r\n    localStorage.setItem(\"startValue\", JSON.stringify(store.getState().count.start))\r\n    localStorage.setItem(\"maxValue\", JSON.stringify(store.getState().count.max))\r\n})\r\n\r\nexport type RootReducerType = typeof rootReducer\r\n\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport store from \"./state/redux-store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}